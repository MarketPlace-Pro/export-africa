import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.REACT_APP_SUPABASE_URL
const supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey)

// Fallback functions for when Supabase is not configured
export const saveToLocalStorage = (key, data) => {
  try {
    const existing = JSON.parse(localStorage.getItem(key) || '[]')
    const newData = [...existing, { ...data, id: Date.now(), timestamp: new Date().toISOString() }]
    localStorage.setItem(key, JSON.stringify(newData))
    return { success: true, data: newData }
  } catch (error) {
    console.error('Error saving to localStorage:', error)
    return { success: false, error }
  }
}

export const getFromLocalStorage = (key) => {
  try {
    const data = JSON.parse(localStorage.getItem(key) || '[]')
    return { success: true, data }
  } catch (error) {
    console.error('Error reading from localStorage:', error)
    return { success: false, error, data: [] }
  }
}

// Product service functions
export const productService = {
  async getProducts() {
    try {
      // Try Supabase first
      if (supabaseUrl && supabaseAnonKey) {
        const { data, error } = await supabase
          .from('products')
          .select('*')
          .eq('status', 'active')
        
        if (!error) return { success: true, data }
      }
      
      // Fallback to localStorage
      const localData = getFromLocalStorage('products')
      if (localData.success && localData.data.length > 0) {
        return { success: true, data: localData.data }
      }
      
      // Final fallback to static data
      return { 
        success: true, 
        data: [
          {
            id: 1,
            name: 'Navel Oranges',
            category: 'Citrus Fruits',
            price: '$850/ton',
            quality: 'Export Grade A',
            availability: 'June - November',
            supplier: 'Citrus Farms Co.',
            location: 'Limpopo, South Africa'
          },
          {
            id: 2,
            name: 'Table Grapes',
            category: 'Grapes', 
            price: '$1,200/ton',
            quality: 'Premium Export',
            availability: 'January - April',
            supplier: 'Table Grape Exporters',
            location: 'Western Cape, South Africa'
          }
        ]
      }
    } catch (error) {
      console.error('Error getting products:', error)
      return { success: false, error }
    }
  },

  async addProduct(productData) {
    try {
      // Try Supabase first
      if (supabaseUrl && supabaseAnonKey) {
        const { data, error } = await supabase
          .from('products')
          .insert([{ ...productData, status: 'active', created_at: new Date().toISOString() }])
          .select()
        
        if (!error) return { success: true, data }
      }
      
      // Fallback to localStorage
      return saveToLocalStorage('products', { ...productData, status: 'active' })
    } catch (error) {
      console.error('Error adding product:', error)
      return { success: false, error }
    }
  }
}

// Inquiry service functions
export const inquiryService = {
  async getInquiries() {
    try {
      // Try Supabase first
      if (supabaseUrl && supabaseAnonKey) {
        const { data, error } = await supabase
          .from('inquiries')
          .select('*')
          .order('created_at', { ascending: false })
        
        if (!error) return { success: true, data }
      }
      
      // Fallback to localStorage
      return getFromLocalStorage('inquiries')
    } catch (error) {
      console.error('Error getting inquiries:', error)
      return { success: false, error }
    }
  },

  async addInquiry(inquiryData) {
    try {
      // Try Supabase first
      if (supabaseUrl && supabaseAnonKey) {
        const { data, error } = await supabase
          .from('inquiries')
          .insert([{ ...inquiryData, status: 'new', created_at: new Date().toISOString() }])
          .select()
        
        if (!error) return { success: true, data }
      }
      
      // Fallback to localStorage
      return saveToLocalStorage('inquiries', { ...inquiryData, status: 'new' })
    } catch (error) {
      console.error('Error adding inquiry:', error)
      return { success: false, error }
    }
  },

  async updateInquiryStatus(inquiryId, status) {
    try {
      // Try Supabase first
      if (supabaseUrl && supabaseAnonKey) {
        const { data, error } = await supabase
          .from('inquiries')
          .update({ status, updated_at: new Date().toISOString() })
          .eq('id', inquiryId)
          .select()
        
        if (!error) return { success: true, data }
      }
      
      // Fallback to localStorage
      try {
        const existing = JSON.parse(localStorage.getItem('inquiries') || '[]')
        const updated = existing.map(inq => 
          inq.id === inquiryId ? { ...inq, status, updated_at: new Date().toISOString() } : inq
        )
        localStorage.setItem('inquiries', JSON.stringify(updated))
        return { success: true, data: updated.find(inq => inq.id === inquiryId) }
      } catch (localError) {
        throw localError
      }
    } catch (error) {
      console.error('Error updating inquiry:', error)
      return { success: false, error }
    }
  }
}
